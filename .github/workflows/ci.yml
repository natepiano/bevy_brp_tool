name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

# Cancel duplicate runs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Fast format check
  format:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: nightly
        components: rustfmt
    
    - name: Check formatting
      run: cargo +nightly fmt -- --check

  # Main test suite
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
    
    - name: Install cargo-nextest
      uses: taiki-e/install-action@nextest
    
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev libasound2-dev pkg-config
    
    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v2
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Build
      run: cargo build --all-features
    
    - name: Run tests
      run: cargo nextest run --all-features
      env:
        # Disable GPU/windowing for headless testing
        WGPU_BACKEND: "gl"
        WINIT_UNIX_BACKEND: "x11"
    
    - name: Run doc tests
      run: cargo test --doc --all-features

  # Check that docs build
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Check documentation
      env:
        RUSTDOCFLAGS: -D warnings
      run: cargo doc --no-deps --all-features